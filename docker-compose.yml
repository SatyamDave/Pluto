version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-identity-postgres
    environment:
      POSTGRES_DB: ai_identity
      POSTGRES_USER: ai_identity_user
      POSTGRES_PASSWORD: ai_identity_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - ai-identity-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_identity_user -d ai_identity"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-identity-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ai-identity-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: ai-identity-api
    environment:
      - DATABASE_URL=postgresql://ai_identity_user:ai_identity_password@postgres:5432/ai_identity
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=production
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-identity-network
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    restart: unless-stopped

  # AI Engine Service
  ai-engine:
    build:
      context: ./packages/ai-engine
      dockerfile: Dockerfile
    container_name: ai-identity-ai-engine
    environment:
      - DATABASE_URL=postgresql://ai_identity_user:ai_identity_password@postgres:5432/ai_identity
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=production
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/status"]
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-identity-network
    volumes:
      - ./packages/ai-engine:/app
      - /app/node_modules
    restart: unless-stopped

  # Next.js Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: ai-identity-web
    environment:
      - NEXT_PUBLIC_API_URL=http://api:8000
      - NEXT_PUBLIC_AI_ENGINE_URL=http://ai-engine:8001
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - NODE_ENV=production
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      - api
      - ai-engine
    networks:
      - ai-identity-network
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-identity-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - web
      - api
      - ai-engine
    networks:
      - ai-identity-network
    restart: unless-stopped

  # Database Migration Service
  db-migrate:
    build:
      context: ./packages/database
      dockerfile: Dockerfile
    container_name: ai-identity-db-migrate
    environment:
      - DATABASE_URL=postgresql://ai_identity_user:ai_identity_password@postgres:5432/ai_identity
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ai-identity-network
    command: ["npm", "run", "db:push"]
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-identity-network:
    driver: bridge
