// Prisma schema for Work Identity Card (WorkCard-only, future-proof)

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// =============================
// Enums
// =============================

enum CardType {
  WORK
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ExperienceVerificationStatus {
  SELF
  CORROBORATED
  VERIFIED
}

enum VerificationKind {
  GITHUB
  DOMAIN_EMAIL
  EDUCATION
}

enum VerificationStatus {
  PENDING
  SUCCESS
  FAILED
}

// =============================
// Tables
// =============================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  handle    String   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime @default(now())

  cards     Card[]
  skills    Skill[]
  experiences Experience[]
  projects  Project[]
  verifications Verification[]

  @@map("users")
}

model Card {
  id          String   @id @default(uuid())
  userId      String
  cardType    CardType @default(WORK)
  slug        String   @unique
  headline    String
  location    String?
  availability String?
  trustScore  Int      @default(40)
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  views       PublicCardView[]
  chats       AiChatLog[]

  @@index([slug])
  @@map("cards")
}

model Skill {
  id           String     @id @default(uuid())
  userId       String
  name         String
  level        SkillLevel
  verified     Boolean    @default(false)
  evidenceRefs Json?

  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, verified])
  @@map("skills")
}

model Experience {
  id                   String     @id @default(uuid())
  userId               String
  role                 String
  org                  String?
  startDate            DateTime
  endDate              DateTime?
  highlights           String[]
  verificationStatus   ExperienceVerificationStatus
  evidenceRefs         Json?

  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

model Project {
  id           String   @id @default(uuid())
  userId       String
  name         String
  summary      String
  links        Json?
  evidenceRefs Json?

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Verification {
  id         String             @id @default(uuid())
  userId     String
  kind       VerificationKind
  status     VerificationStatus @default(PENDING)
  confidence Float?             // 0..1
  metadata   Json?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verifications")
}

model PublicCardView {
  id     String   @id @default(uuid())
  cardId String
  ipHash String
  uaHash String
  ts     DateTime @default(now())

  card   Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@index([cardId, ts])
  @@map("public_card_views")
}

model AiChatLog {
  id     String   @id @default(uuid())
  cardId String
  q      String
  a      String
  ts     DateTime @default(now())

  card   Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("ai_chat_logs")
}

model SigningKey {
  id         String   @id @default(uuid())
  kid        String   @unique
  alg        String
  privatePem String   // encrypted at rest by application layer
  publicPem  String
  createdAt  DateTime @default(now())
  rotatedAt  DateTime?

  @@map("signing_keys")
}


